[{"id":0,"href":"/mobile_robotics/external_localisation/","title":"External localisation","section":"Welcome to mobile robotics","content":"External localisation #  Placeholder\n"},{"id":1,"href":"/mobile_robotics/sensors/","title":"Sensors","section":"Welcome to mobile robotics","content":"Sensors #  Placeholder\nGet Home  "},{"id":2,"href":"/mobile_robotics/programming/","title":"Programming","section":"Welcome to mobile robotics","content":"Setting Up #  Now that you have tested that the robot functions correctly. We will begin to go through the main body of code that you will be using thoughout your project. It is highly suggested to install VS code, (a code editor like spyder and Jupyter Notebook), as it will show all the python files that you need to work with on the side.\nBoth the Land Rover and the Robotic vessel will use the same code. Depending on your robot, you will need to configure it in the \u0026ldquo;configuration.yaml\u0026rdquo; file.\nThe installation will take you to a github repository. To install, click on the code button then install the code by clicking the \u0026lsquo;download zip\u0026rsquo; in the dropdown menu\n Install VSCode  Main Code   Once installed, extract the folder and open mobile_robotics_python in vs code within mobile_robotics_python-main/mobile_robotics_python-main/src open the folder mobile_robotics_python. Once opened the folder should look something like this: Folder Introduction #  This folder will be where you will write your code throughout the project. Although the code might look a little intimidating at first. Most of the files withing the folder will work in the background and therefore will not need to be tampered with.\nThe objective of your course will be to create new localization_solutions and navigations_solutions so that the robot is able to navigate autonomously to its best ability.\nHow the code is structured #  When the the code is run, it will got through the main loop within robot.py. In simple words it goes in a \u0026lsquo;sense, think, act\u0026rsquo; loop.\nSimplified model of structure #   as you can see in the python page, within the loop:\nwhile not self.mission_control.finished: there is the 3 steps: First the code records all its sensors (it will vary depending on your robot):\nSensing #   measurements = [] if self.compass is not None: msg = self.compass.read() measurements.append(msg) if self.encoder is not None: self.encoder.yaw_rad = self.compass.yaw_rad msg = self.encoder.read() measurements.append(msg) you may now change these variables based upon what robot you have:\nIf you have the Pitop, it might be useful to record the compass, encoder, lidar and external_positioning\nIf you have the robotic vessel, it might be useful to record the encoder, accelerometer, magnetometer and external_positioning\nThinking #  Once the robot has updated all the sensor data, it will use the information in order to understand it\u0026rsquo;s current location. At the moment the code is using a simple \u0026lsquo;dead_reckoning\u0026rsquo; algorithm. You may find the file inside the location_solutions folder\n if len(measurements) \u0026gt; 0: for measurement in sorted(measurements, key=lambda m: m.stamp_s): self.state = self.localisation.update(measurement) Create a new file in the same location_solution folder, name it (***.py), then once you have finished the code within, you will have to change configurations to use that file instead of dead reckoning as so:\nEditing localisation.py #  Add another if statement in the localisation.py file in the mobile_robotics, (main) folder. This file directs the robot function to the appropriate localisation_solution by reading the configuration.yaml file.\n Remember, if you want to follow the same structure, you will need to have a predict and update function withing your new localization solution. For example, you may choose to implement the location predictions withing the main robot loop, (as it isn\u0026rsquo;t currently being utilized).  Editing configuration.yaml #  Change the driver of localization within the configuration.yaml file, (found in the configuration folder). All files refer to this yaml in order to understand which file is to implemented. In future you may want to change some of the offsets within the file as its likely that there is an offset between your sensors, motors and the centre of the robot. You will also be able to change the configuration of your robot. Aka changing your configuration to the correct encoder drivers and compas/magnetometer depending if you are using the robotic vessel or pitop.  Now that you have learned a little more about the configuration yaml and the main robot function. Try creating a new waypoint mission yourself and chaning the configuration.yaml !  "},{"id":3,"href":"/mobile_robotics/intelligent_mobile_robotics/","title":"Intelligent mobile robotics","section":"Welcome to mobile robotics","content":"Intelligent mobile robotics #  Placeholder\n"},{"id":4,"href":"/mobile_robotics/maritime_robotics/","title":"Maritime robotics","section":"Welcome to mobile robotics","content":"FABRICATION #  PROCESS #  It is recommended to go through the steps without gluing anything first to familiarise yourself). To form one float:\n  Following the cement instructions, form two “C”s made up of two 90° bends and a 5.5cm tube each. The glue dries fairly quickly, make sure the bends are aligned using the fabrication lines on the plastic.\n  Grab one of the “C”s and weld one 40cm tube. You should now have something that resembles an “L” shape.\n  Connect the one 16.5cm tube and one 17.5cm tube to the equal tee according to the following diagram (pay attention to the curve in the Tee being closer to the longer piece of tubing).\n  Glue the end of the 17.5cm tube to the empty 90° bend in the “L” assembly from step 2. At this point, your assembly should have a “U” shape.\n  Using the second “C” from step above, close the assembly by gluing the 40cm tube and 16.5cm to the empty 90° bends.\n  Leave to dry and repeat steps 1-5 to form the second float. To form the centre piece:\n  Grab the 25cm tube and mark 5cm from one end.\n  Place 3 pipe clips at one end, aligning the one closest to the end with the mark above. Make sure the pipe clips are aligned with each other and draw a line across the top of them and the tube (this will make alignment easier after the glue is applied).\n  Rotate the middle clip by 180 degrees and mark the tube on the opposite side.\n  One by one, apply glue to the tube and the inside of each pipe clip and weld them together. Leave to dry for 10min.\n  Repeat steps 1-4 for the other end, making sure that the clips are aligned with the previous ones as well. ASSEMBLY This section describes how to put together one marine platform. Before starting, make sure you have gathered all the following materials: PVC Parts\n  • x2 Floats\n• x1 Centre Tube with Pipe Clips\n3D Printed Assembly\n• x2 Lower Bracket (3D Printed)\n• x2 Motor Pillars (Left/Right 3D Printed)\n• x2 Motor Cones (3D Printed)\n• x2 Motor Domes (3D Printed)\n• x2 Velcro Attachments (3D Printed)\n• x10 M4 – 20mm Bolts\n• x10 M4 – 30mm Bolts\n• x20 M4 Nylock Nuts\n• x40 M4 Washers\n• x2 2mm x 300mm Threaded Shaft (Trim to right length from threaded end)\n• x1 RH 30mm Propeller\n• x1 LH 30mm Propeller\n• x2 2mm x 2mm Shaft Couplers\n• x2 BL-1510 Brushless Motors\n• x2 2mm Bearings\nControl Box\n• x1 Battery\n• x1 Raspberry Pi with Sense Hat\n• X1 Raspberry Pi Case with Foam Block\n• x1 Connection Block\n• x1 DC/DC Converter\n• x1 Pololu Micro Maestro Controller\n• x2 ESC Motor Controllers\n• x1 Micro USB Cable to USB A\n• x1 Micro USB Cable to Red/Black\n• x1 Double Pin to Cable ends connector\n• Velcro Tape\nLet’s start by assembling the structure of the marine platform.\n  Grab the two floats and remove the screw caps from each tee and their washers.\n  At either end of the centre piece, insert the screw caps, the plastic washer and finally the black rubber washer (in that order). Make sure the inclined edge of the rubber washer faces towards the end of the tubing.\n  Connect the floats to the centre piece by screwing the caps to the tees. Ensure it is fully tightened as this will prevent water from entering and the rotation of the floats.\n  The structure is now ready! Continue by assembling the motors:\n  Start by attaching one lower bracket (3D Printed) to the pipe clips of the centre piece as illustrated below. Remember to put a washer at either side of the part!\n  Grab the motor pillar (3D Printed) and position the motor in the cross socket. Proceed to attach one end of the coupler.\n  Take the propeller shaft provided and trim it to 94mm from the threaded end.\n  Press fit a bearing at the end of the motor cone (3D Printed), you can heat it slightly to locally melt the plastic if necessary.\n  Connect the end of the shaft to the coupler\n  Fit the shaft through the bearing and screw the propeller in (Make sure it is the correct propeller for the motor side you are assembling, they will spin in opposite directions). If you find the propeller coming loose during tests, consider super gluing it in place after you are sure they spin in the right direction.\n  You can now attach the motor cone, motor pillar and motor dome together. Insert three M4 – 30mm bolts with their respective washers through the dome first as shown below:\n  Now attach the motor assembly above to the lower bracket, do not forget the washer at either end of the M4 – 30mm bolts.\n  You have now finished mounting one motor, please repeat steps 1-8 to mount the second one. Let’s now prepare the control box, for reference of where to place the components, please have a look at the following image:\n  Carry out the connections according to the diagram below:\n  "},{"id":5,"href":"/mobile_robotics/pi_configuration/","title":"pi_configuration","section":"Welcome to mobile robotics","content":"Chrony Configuration #  Chrony is an implementation of NTP, it allows for the pi\u0026rsquo;s to synchronize their time even if internet is not connected to one of them. It acts as a daemon in the background. So when setup it should never need to be reconfigured or edited with afterwards.\nServer Configuration (Camera system Pi) #   Install an editor of your choice (nano, vim, gedit), for example for vim you would write  sudo apt install vim Install chrony with  sudo apt install chrony TBD  Client Configuration (student Raspberry Pi) #   Install an editor of your choice (nano, vim, gedit), for example for vim you would write  sudo apt install vim Install chrony with  sudo apt install chrony Find or ask the IP address of the chrony server in the local network (the wifi router network). It should be something like 192.168.0.X, where the last X will change for a number 0-254. Edit chrony configuration, and add the following line at the top of the file  server 192.168.0.X where X has to be changed for the correct IP. The file is located at /etc/chrony/chrony.conf. To edit it, you will need to use sudo, for example:\nsudo vi /etc/chrony/chrony.conf Verify that you can get the updates. First restart chrony with  sudo systemctl restart chrony and now verify that chrony is using your IP by running the command\nchronyc sources "},{"id":6,"href":"/mobile_robotics/intelligent_mobile_robotics/platform/","title":"Platform","section":"Intelligent mobile robotics","content":"Platform #  "},{"id":7,"href":"/mobile_robotics/maritime_robotics/platform/","title":"Platform","section":"Maritime robotics","content":"Platform #  "}]